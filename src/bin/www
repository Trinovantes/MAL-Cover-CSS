#!/usr/bin/env node

'use strict';

const http = require('http');
const app = require('src/app');
const logger = require('src/logger');

logger.bar();
logger.info(__filename);
logger.bar();

//-----------------------------------------------------------------------------
// App
//-----------------------------------------------------------------------------

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

//-----------------------------------------------------------------------------
// Server
//-----------------------------------------------------------------------------

let server = http.createServer(app);
server.listen(port);

// Server error handler
server.on('error', function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
             ? 'Pipe ' + port
             : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            logger.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            logger.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
});

// Server error handler
server.on('listening', function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string'
                 ? 'pipe ' + addr
                 : 'port ' + addr.port;

    logger.info('Listening on ' + bind);
});

//-----------------------------------------------------------------------------
// Helpers
//-----------------------------------------------------------------------------

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}
