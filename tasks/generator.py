from flask import abort
import logging
import itertools

from celeryapp import celeryapp
from models.media import Media

logger = logging.getLogger()
logger.setLevel(logging.INFO)

#-------------------------------------------------------------------------------
# Generator Class
#-------------------------------------------------------------------------------

class Generator():
    def __init__(self, medium_type, element_to_style):
        self.response_body    = ''
        self.medium_type      = medium_type
        self.element_to_style = element_to_style
        self.__validate_input()

    def generate(self):
        css_content = "/* This file was generated by https://github.com/Trinovantes/MyAnimeList-Cover-CSS-Generator */\n\n"
        
        media_items = Media.select()
        if self.medium_type != 'all':
            media_items = media_items.where(Media.medium_type == self.medium_type)

        if self.element_to_style == 'self':
            pseudo_selector = ""
        elif self.element_to_style == 'before':
            pseudo_selector = ":before"
        elif self.element_to_style == 'after':
            pseudo_selector = ":after"

        for item in media_items:
            css_rule = ""
            if self.element_to_style == 'more':
                css_rule += "#more" + str(item.mal_id)
            else:
                css_rule += ".animetitle" # Luckily even mangas' <a> tags use the .animetitle css class
                css_rule += "[href^='/" + item.medium_type + "/" + str(item.mal_id) + "/']" + pseudo_selector

            css_rule += "{background-image:url(" + item.img_url + ");}"
            css_content += css_rule

        return css_content

    def __validate_input(self):
        if self.medium_type != 'all' and \
           self.medium_type != 'anime' and \
           self.medium_type != 'manga':
            abort(400)

        if self.element_to_style != 'self' and \
           self.element_to_style != 'before' and \
           self.element_to_style != 'after' and \
           self.element_to_style != 'more':
            abort(400)

        # The '#more[mal id]' html id is based on MAL's id which is not unique
        # for manga/anime (i.e. different manga/anime can share the same id)
        if self.element_to_style == 'more' and self.medium_type == 'all':
            abort(400)

#-------------------------------------------------------------------------------
# Celery Task
#-------------------------------------------------------------------------------

@celeryapp.task(ignore_result=True)
def generate_css():
    mediums = ['all', 'anime', 'manga']
    elements = ['self', 'before', 'after', 'more']
    css_to_generate = list(itertools.product(mediums, elements))
    css_to_generate.remove(('all', 'more'))

    for pair in css_to_generate:
        medium = pair[0]
        element = pair[1]
        fileName = 'static/css/covercss-' + medium + '-' + element + '.css'

        fs = open(fileName, 'w')
        fs.write(Generator(medium, element).generate())
        fs.close()
        
        logging.info('Finished generating "' + fileName + '"')
