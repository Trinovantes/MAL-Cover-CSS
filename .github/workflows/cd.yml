name: Continuous Deployment 

on:
  workflow_dispatch:
  push:
    branches:
      - master

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    environment: production
    steps:

    - name: Checkout
      uses: actions/checkout@v2

    - name: Cache node_modules
      uses: actions/cache@v2
      env:
        CACHE_NAME: cache-node-modules
      with:
        path: '**/node_modules'
        key: ${{ runner.os }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('**/yarn.lock', '**/package-lock.json') }}

    - name: Install Dependencies
      run: yarn install

    - name: Create Dummy secrets
      run: |
        sudo mkdir -p /var/secrets/malcovercss/
        sudo touch    /var/secrets/malcovercss/ENCRYPTION_KEY.txt
        sudo touch    /var/secrets/malcovercss/MAL_CLIENT_ID.txt
        sudo touch    /var/secrets/malcovercss/MAL_CLIENT_SECRET.txt
        sudo touch    /var/secrets/malcovercss/MYSQL_DATABASE.txt
        sudo touch    /var/secrets/malcovercss/MYSQL_HOST.txt
        sudo touch    /var/secrets/malcovercss/MYSQL_PASSWORD.txt
        sudo touch    /var/secrets/malcovercss/MYSQL_USER.txt

    - name: Build Images
      run: yarn dockerProdBuild

    - name: Log in to Registry
      run: echo "${{ secrets.DOCKER_ACCESS_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

    - name: Push to Registry
      run: yarn dockerPush

  deployToProduction:
    needs: build
    name: Deploy to Production
    runs-on: ubuntu-latest
    environment: production
    steps:

    - name: Checkout
      uses: actions/checkout@v2

    - name: Log in to Registry
      run: echo "${{ secrets.DOCKER_ACCESS_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

    - name: Create SSH Key to Production
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        echo "${{ secrets.SSH_KEYSCAN }}" > ~/.ssh/known_hosts
        chmod 600 ~/.ssh/known_hosts

    - name: Deploy to Production
      run: |
        docker context create remote --docker "host=ssh://${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}"
        docker context use remote
        yarn dockerPull
        yarn dockerProdUp
