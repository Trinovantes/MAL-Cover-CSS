name: Continuous Deployment

on:
  workflow_dispatch:
  push:
    branches:
      - master
    paths-ignore:
      - README.md
      - .vscode
      - .editorconfig
      - .gitignore

jobs:
  test:
    name: Test
    environment: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Create .env file
        run: echo "${{ secrets.ENV_FILE }}" > .env

      - name: Save yarn cache location to env
        run: echo "YARN_CACHE=$(yarn cache dir)" >> $GITHUB_ENV

      - name: Cache node_modules
        uses: actions/cache@v2
        with:
          path: ${{ env.YARN_CACHE }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock', '**/package-lock.json') }}

      - name: Cache playwright
        uses: actions/cache@v2
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/yarn.lock', '**/package-lock.json') }}

      - name: Install dependencies
        run: yarn install

      - name: Install playwright
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: yarn playwright install --with-deps

      - name: Run linter
        run: yarn lint

      - name: Build server
        run: yarn buildWeb
        env:
          NODE_ENV: development

      - name: Update hosts file
        run: echo "127.0.0.1 test.malcovercss.link" | sudo tee -a /etc/hosts

      - name: Run tests
        run: yarn test

      - name: Upload playwright results
        uses: actions/upload-artifact@v2
        with:
          retention-days: 30
          name: playwright
          path: |
            test-results/
            playwright-report/

  build:
    needs: test
    name: Build
    environment: production
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Create .env file
        run: echo "${{ secrets.ENV_FILE }}" > .env

      - name: Pull images from registry
        run: make pull || true

      - name: Build images
        run: make build

      - name: Push images to registry
        run: make push

      - name: Copy dist from image to disk for sentry upload
        run: |
          mkdir -p ./dist/cron
          TEMP_CONTAINER=$(docker create ghcr.io/trinovantes/malcovercss-cron)
          docker cp $TEMP_CONTAINER:/app/dist/cron/. ./dist/cron
          docker rm $TEMP_CONTAINER

          mkdir -p ./dist/web
          TEMP_CONTAINER=$(docker create ghcr.io/trinovantes/malcovercss-web-app)
          docker cp $TEMP_CONTAINER:/app/dist/web/. ./dist/web
          docker rm $TEMP_CONTAINER

      - name: Create sentry release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        with:
          environment: production
          sourcemaps: ./dist/cron ./dist/web
          url_prefix: ~/

  deploy:
    needs: build
    name: Deploy
    environment: production
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Create .env file
        run: echo "${{ secrets.ENV_FILE }}" > .env

      - name: Create SSH key to production
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "${{ secrets.SSH_KEYSCAN }}" > ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Create and use remote context
        run: |
          docker context create remote --docker "host=ssh://${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}"
          docker context use remote

      - name: Pull images from registry
        run: make pull

      - name: Start containers
        run: make run

      - name: Prune old images
        run: docker image prune -f
