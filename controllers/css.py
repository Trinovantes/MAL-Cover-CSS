import webapp2
import logging

from models.user import User
from models.media import Media

class Handler(webapp2.RequestHandler):
    def get(self, username, kind='all', element_to_style='self'):
        need_anime = (kind == 'all' or kind == 'anime')
        need_manga = (kind == 'all' or kind == 'manga')

        self.user = User.all().filter('username =', username).get()
        if self.user is None:
            # User doesn't exist so schedule them to be scraped later
            logging.info('User "' + username + '" does not exist in database')
            self.user = User(username=username, scrape_anime=need_anime, scrape_manga=need_manga)
            self.user.put()

            self.generateEmptyResponse()
        else:
            # User exists so generate their CSS
            self.generateCSS(username, need_anime, need_manga, element_to_style)

    def generateHeading(self):
        self.response.out.write('/* This file was generated by https://github.com/Trinovantes/MyAnimeList-CSS-Generator */')
        self.response.headers['Content-Type'] = 'text/css'

    def generateEmptyResponse(self):
        logging.debug('Generating empty output for "' + username + '"')
        self.generateHeading()

    def generateCSS(self, username, need_anime, need_manga, element_to_style):
        self.generateHeading()

        if not need_anime and not need_manga:
            # How does this case even happen?
            logging.error('Generating CSS for user who doesn\'t need anime or manga')
            return
        
        if element_to_style == 'self':
            pseudo_selector = ''
        else if element_to_style == 'before':
            pseudo_selector = ':before'
        else if element_to_style == 'after':
            pseudo_selector = ':after'

        media_items = Media.get(self.user.media_list)
        if need_anime != need_manga:
            # Only need anime XOR manga so we need to filter media_items
            media_items = [i for i in media_items if i.is_anime == need_anime]

        logging.debug('Generating output for "' + username + '" with ' + str(len(media_items)) + ' items')
        for media in media_items:
            css_rule = '.animetitle[href="' + item.rel_url + '"]:' + pseudo_selector
            css_rule += '{background-image:url(' + media.cover_path + ');}'
            self.response.write(css_rule)
