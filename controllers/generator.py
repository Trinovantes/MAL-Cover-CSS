import logging
from flask import make_response
from datetime import datetime

from models.user import User
from models.media import Media

class Generator():
    def __init__(self, medium_type, element_to_style):
        self.response_body    = ''
        self.medium_type      = medium_type
        self.element_to_style = element_to_style

    def generate(self):
        self.__validate_input()
        self.__generate_css()
        response = make_response(self.response_body)
        response.headers['Content-Type'] = 'text/css'
        return response

    def __validate_input(self):
        if self.medium_type != 'all' and \
           self.medium_type != 'anime' and \
           self.medium_type != 'manga':
            abort(400)

        if self.element_to_style != 'self' and \
           self.element_to_style != 'before' and \
           self.element_to_style != 'after' and \
           self.element_to_style != 'more':
            abort(400)

        if self.element_to_style == 'more' and self.medium_type == 'all':
            abort(400)

    #---------------------------------------------------------------------------
    # Generate
    #---------------------------------------------------------------------------

    def __add_css_comment(self, comment):
        self.response_body += "/* " + comment + " */\n"

    def __generate_css(self):
        self.__add_css_comment("This file was generated by https://github.com/Trinovantes/MyAnimeList-Cover-CSS-Generator")

        media_items = Media.select()
        if self.medium_type != 'all':
            media_items = media_items.where(Media.medium_type == self.medium_type)

        if self.element_to_style == 'more':
            for item in media_items:
                css_rule = "#more" + str(item.mal_id)
                css_rule += "{background-image:url(" + item.img_url + ");}"
                self.response_body += css_rule
        else:
            if self.element_to_style == 'self':
                pseudo_selector = ""
            elif self.element_to_style == 'before':
                pseudo_selector = ":before"
            elif self.element_to_style == 'after':
                pseudo_selector = ":after"

            for item in media_items:
                css_rule = ".animetitle" # Luckily even mangas' <a> tags use the .animetitle css class
                css_rule += "[href^=/" + item.medium_type + "/" + str(item.mal_id) + "]" + pseudo_selector
                css_rule += "{background-image:url(" + item.img_url + ");}"
                self.response_body += css_rule
